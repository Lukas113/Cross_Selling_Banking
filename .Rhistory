mass_in_net = 0
}
stonefall_out_1 <- runif(1, min = 0, max = 1) #currently 50%
stonefall_out_2 <- runif(1, min = 0, max = 1) #currently 50%
if (stonefall_out_1 > 0.6){
speed_1 <- rnorm(1, mean = nrm_fit_speed_out_1$estimate[1], sd = nrm_fit_speed_out_1$estimate[2])
mass_1 <- rlnorm(1, meanlog = lnrm_fit_mass_out_1$estimate[1], sdlog = lnrm_fit_mass_out_1$estimate[2])
broken <- rock_event(speed_1, mass_1)
if (broken){
break
}
}
if (stonefall_out_2 > 0.6){
speed_2 <- rnorm(1, mean = nrm_fit_speed_out_2$estimate[1], sd = nrm_fit_speed_out_2$estimate[2])
mass_2 <- rexp(1, rate = e_fit_mass_out_2$estimate[1])
broken <- rock_event(speed_2, mass_2)
if (broken){
break
}
}
}
}
prob <- num_of_failures / num_of_simulations
num_of_failures
year_hours <- 8760
num_of_simulations <- 100
num_of_failures <- 0
mass_in_net <- 0
rock_event <- function(speed, mass){
broken <- FALSE
energy <- (0.5 * mass * speed^2) / 1000
if (energy >= 1000){
print(energy)
broken <- TRUE
}else if (energy >= 500){
if (mass_in_net >= 2000){
print(energy)
broken <- TRUE
}
}
if (broken){
num_of_failures = num_of_failures + 1
}
mass_in_net = mass_in_net + mass
return(broken)
}
for (simulation in 1:num_of_simulations){
mass_in_net = 0
for (now in 1:year_hours){
if (now %% 24 == 8){
mass_in_net = 0
}
stonefall_out_1 <- runif(1, min = 0, max = 1) #currently 50%
stonefall_out_2 <- runif(1, min = 0, max = 1) #currently 50%
if (stonefall_out_1 > 0.6){
speed_1 <- rnorm(1, mean = nrm_fit_speed_out_1$estimate[1], sd = nrm_fit_speed_out_1$estimate[2])
mass_1 <- rlnorm(1, meanlog = lnrm_fit_mass_out_1$estimate[1], sdlog = lnrm_fit_mass_out_1$estimate[2])
broken <- rock_event(speed_1, mass_1)
if (broken){
break
}
}
if (stonefall_out_2 > 0.6){
speed_2 <- rnorm(1, mean = nrm_fit_speed_out_2$estimate[1], sd = nrm_fit_speed_out_2$estimate[2])
mass_2 <- rexp(1, rate = e_fit_mass_out_2$estimate[1])
broken <- rock_event(speed_2, mass_2)
if (broken){
break
}
}
}
}
prob <- num_of_failures / num_of_simulations
num_of_failures
year_hours <- 8760
num_of_simulations <- 100
num_of_failures <- 0
mass_in_net <- 0
rock_event <- function(speed, mass){
broken <- FALSE
energy <- (0.5 * mass * speed^2) / 1000
if (energy >= 1000){
print(energy)
broken <- TRUE
}else if (energy >= 500){
if (mass_in_net >= 2000){
print(energy)
broken <- TRUE
}
}
if (broken){
num_of_failures <<- num_of_failures + 1
}
mass_in_net <<- mass_in_net + mass
return(broken)
}
for (simulation in 1:num_of_simulations){
mass_in_net = 0
for (now in 1:year_hours){
if (now %% 24 == 8){
mass_in_net <<- 0
}
stonefall_out_1 <- runif(1, min = 0, max = 1) #currently 50%
stonefall_out_2 <- runif(1, min = 0, max = 1) #currently 50%
if (stonefall_out_1 > 0.6){
speed_1 <- rnorm(1, mean = nrm_fit_speed_out_1$estimate[1], sd = nrm_fit_speed_out_1$estimate[2])
mass_1 <- rlnorm(1, meanlog = lnrm_fit_mass_out_1$estimate[1], sdlog = lnrm_fit_mass_out_1$estimate[2])
broken <- rock_event(speed_1, mass_1)
if (broken){
break
}
}
if (stonefall_out_2 > 0.6){
speed_2 <- rnorm(1, mean = nrm_fit_speed_out_2$estimate[1], sd = nrm_fit_speed_out_2$estimate[2])
mass_2 <- rexp(1, rate = e_fit_mass_out_2$estimate[1])
broken <- rock_event(speed_2, mass_2)
if (broken){
break
}
}
}
}
prob <- num_of_failures / num_of_simulations
num_of_failures
year_hours <- 8760
num_of_simulations <- 1
num_of_failures <- 0
mass_in_net <- 0
rock_event <- function(speed, mass){
broken <- FALSE
energy <- (0.5 * mass * speed^2) / 1000
if (energy >= 1000){
broken <- TRUE
}else if (energy >= 500){
if (mass_in_net >= 2000){
broken <- TRUE
}
}
if (broken){
num_of_failures <<- num_of_failures + 1
}
mass_in_net <<- mass_in_net + mass
return(broken)
}
for (simulation in 1:num_of_simulations){
mass_in_net = 0
for (now in 1:year_hours){
if (now %% 24 == 8){
print(mass_in_net)
mass_in_net <<- 0
print(mass_in_net)
}
stonefall_out_1 <- runif(1, min = 0, max = 1) #currently 50%
stonefall_out_2 <- runif(1, min = 0, max = 1) #currently 50%
if (stonefall_out_1 > 0.6){
speed_1 <- rnorm(1, mean = nrm_fit_speed_out_1$estimate[1], sd = nrm_fit_speed_out_1$estimate[2])
mass_1 <- rlnorm(1, meanlog = lnrm_fit_mass_out_1$estimate[1], sdlog = lnrm_fit_mass_out_1$estimate[2])
broken <- rock_event(speed_1, mass_1)
if (broken){
break
}
}
if (stonefall_out_2 > 0.6){
speed_2 <- rnorm(1, mean = nrm_fit_speed_out_2$estimate[1], sd = nrm_fit_speed_out_2$estimate[2])
mass_2 <- rexp(1, rate = e_fit_mass_out_2$estimate[1])
broken <- rock_event(speed_2, mass_2)
if (broken){
break
}
}
}
}
prob <- num_of_failures / num_of_simulations
num_of_failures
year_hours <- 8760
num_of_simulations <- 100
num_of_failures <- 0
mass_in_net <- 0
rock_event <- function(speed, mass){
broken <- FALSE
energy <- (0.5 * mass * speed^2) / 1000
if (energy >= 1000){
broken <- TRUE
}else if (energy >= 500){
if (mass_in_net >= 2000){
broken <- TRUE
}
}
if (broken){
num_of_failures <<- num_of_failures + 1
}
mass_in_net <<- mass_in_net + mass
return(broken)
}
for (simulation in 1:num_of_simulations){
mass_in_net = 0
for (now in 1:year_hours){
if (now %% 24 == 8){
mass_in_net <<- 0
}
stonefall_out_1 <- runif(1, min = 0, max = 1) #currently 50%
stonefall_out_2 <- runif(1, min = 0, max = 1) #currently 50%
if (stonefall_out_1 > 0.96){
speed_1 <- rnorm(1, mean = nrm_fit_speed_out_1$estimate[1], sd = nrm_fit_speed_out_1$estimate[2])
mass_1 <- rlnorm(1, meanlog = lnrm_fit_mass_out_1$estimate[1], sdlog = lnrm_fit_mass_out_1$estimate[2])
broken <- rock_event(speed_1, mass_1)
if (broken){
break
}
}
if (stonefall_out_2 > 0.6){
speed_2 <- rnorm(1, mean = nrm_fit_speed_out_2$estimate[1], sd = nrm_fit_speed_out_2$estimate[2])
mass_2 <- rexp(1, rate = e_fit_mass_out_2$estimate[1])
broken <- rock_event(speed_2, mass_2)
if (broken){
break
}
}
}
}
prob <- num_of_failures / num_of_simulations
prob
num_of_failures
year_hours <- 8760
num_of_simulations <- 100
num_of_failures <- 0
mass_in_net <- 0
rock_event <- function(speed, mass){
broken <- FALSE
energy <- (0.5 * mass * speed^2) / 1000
if (energy >= 1000){
broken <- TRUE
}else if (energy >= 500){
if (mass_in_net >= 2000){
broken <- TRUE
}
}
if (broken){
num_of_failures <<- num_of_failures + 1
}
mass_in_net <<- mass_in_net + mass
return(broken)
}
for (simulation in 1:num_of_simulations){
mass_in_net = 0
for (now in 1:year_hours){
if (now %% 24 == 8){
mass_in_net <<- 0
}
stonefall_out_1 <- runif(1, min = 0, max = 1)
stonefall_out_2 <- runif(1, min = 0, max = 1)
if (stonefall_out_1 > 0.972){
speed_1 <- rnorm(1, mean = nrm_fit_speed_out_1$estimate[1], sd = nrm_fit_speed_out_1$estimate[2])
mass_1 <- rlnorm(1, meanlog = lnrm_fit_mass_out_1$estimate[1], sdlog = lnrm_fit_mass_out_1$estimate[2])
broken <- rock_event(speed_1, mass_1)
if (broken){
break
}
}
if (stonefall_out_2 > 0.986){
speed_2 <- rnorm(1, mean = nrm_fit_speed_out_2$estimate[1], sd = nrm_fit_speed_out_2$estimate[2])
mass_2 <- rexp(1, rate = e_fit_mass_out_2$estimate[1])
broken <- rock_event(speed_2, mass_2)
if (broken){
break
}
}
}
}
prob <- num_of_failures / num_of_simulations
prob
num_of_failures
year_hours <- 8760
num_of_simulations <- 1000
num_of_failures <- 0
mass_in_net <- 0
rock_event <- function(speed, mass){
broken <- FALSE
energy <- (0.5 * mass * speed^2) / 1000
if (energy >= 1000){
broken <- TRUE
}else if (energy >= 500){
if (mass_in_net >= 2000){
broken <- TRUE
}
}
if (broken){
num_of_failures <<- num_of_failures + 1
}
mass_in_net <<- mass_in_net + mass
return(broken)
}
for (simulation in 1:num_of_simulations){
mass_in_net = 0
for (now in 1:year_hours){
if (now %% 24 == 8){
mass_in_net <<- 0
}
stonefall_out_1 <- runif(1, min = 0, max = 1)
stonefall_out_2 <- runif(1, min = 0, max = 1)
if (stonefall_out_1 > 0.972){
speed_1 <- rnorm(1, mean = nrm_fit_speed_out_1$estimate[1], sd = nrm_fit_speed_out_1$estimate[2])
mass_1 <- rlnorm(1, meanlog = lnrm_fit_mass_out_1$estimate[1], sdlog = lnrm_fit_mass_out_1$estimate[2])
broken <- rock_event(speed_1, mass_1)
if (broken){
break
}
}
if (stonefall_out_2 > 0.986){
speed_2 <- rnorm(1, mean = nrm_fit_speed_out_2$estimate[1], sd = nrm_fit_speed_out_2$estimate[2])
mass_2 <- rexp(1, rate = e_fit_mass_out_2$estimate[1])
broken <- rock_event(speed_2, mass_2)
if (broken){
break
}
}
}
}
prob <- num_of_failures / num_of_simulations
prob
num_of_failures
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
a <- log(rockfall$energy)
a
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
test_vector <- c(500, 1000)
prob_lnorm <- stats::plnorm(test_vector, meanlog = lnrm_fit$estimate[1], sdlog = lnrm_fit$estimate[2], lower.tail = FALSE)
prob_lnorm_500_to_1000 <- prob_lnorm[1] - prob_lnorm[2]
prob_lnorm_1000 <- prob_lnorm[2]
prob_lnorm_500_to_1000
prob_lnorm_1000
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
lnrm_fit$estimate
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
test_vector <- c(500, 1000)
prob_lnorm <- stats::plnorm(test_vector, meanlog = lnrm_fit$estimate[1], sdlog = lnrm_fit$estimate[2], lower.tail = FALSE)
prob_lnorm_500_to_1000 <- prob_lnorm[1] - prob_lnorm[2]
prob_lnorm_1000 <- prob_lnorm[2]
prob_lnorm_500_to_1000
prob_lnorm_1000
lnrm_fit$estimate
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
test_vector <- c(500, 1000)
prob_lnorm <- stats::plnorm(test_vector, meanlog = lnrm_fit$estimate[1], sdlog = lnrm_fit$estimate[2], lower.tail = FALSE)
prob_lnorm_500_to_1000 <- prob_lnorm[1] - prob_lnorm[2]
prob_lnorm_1000 <- prob_lnorm[2]
prob_lnorm_500_to_1000
prob_lnorm_1000
lnrm_fit$estimate
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
test_vector <- c(500, 1000)
prob_lnorm <- stats::plnorm(test_vector, meanlog = lnrm_fit$estimate[1], sdlog = lnrm_fit$estimate[2], lower.tail = FALSE)
prob_lnorm_500_to_1000 <- prob_lnorm[1] - prob_lnorm[2]
prob_lnorm_1000 <- prob_lnorm[2]
prob_lnorm_500_to_1000
prob_lnorm_1000
lnrm_fit$estimate
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
test_vector <- c(500, 1000)
prob_lnorm <- stats::plnorm(test_vector, meanlog = lnrm_fit$estimate[1], sdlog = lnrm_fit$estimate[2], lower.tail = FALSE)
prob_lnorm_500_to_1000 <- prob_lnorm[1] - prob_lnorm[2]
prob_lnorm_1000 <- prob_lnorm[2]
prob_lnorm_500_to_1000
prob_lnorm_1000
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
prob_lnorm <- stats::plnorm(log(c(500, 1000)), meanlog = lnrm_fit$estimate[1], sdlog = lnrm_fit$estimate[2], lower.tail = FALSE)
prob_lnorm_500_to_1000 <- prob_lnorm[1] - prob_lnorm[2]
prob_lnorm_1000 <- prob_lnorm[2]
prob_lnorm_500_to_1000
prob_lnorm_1000
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
prob_lnorm <- stats::plnorm(log(c(500, 1000)), meanlog = lnrm_fit$estimate[1], sdlog = lnrm_fit$estimate[2], lower.tail = TRUE)
prob_lnorm_500_to_1000 <- prob_lnorm[1] - prob_lnorm[2]
prob_lnorm_1000 <- prob_lnorm[2]
prob_lnorm_500_to_1000
prob_lnorm_1000
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
prob_lnorm <- stats::plnorm(c(500, 1000), meanlog = lnrm_fit$estimate[1], sdlog = lnrm_fit$estimate[2], lower.tail = TRUE)
prob_lnorm_500_to_1000 <- prob_lnorm[1] - prob_lnorm[2]
prob_lnorm_1000 <- prob_lnorm[2]
prob_lnorm_500_to_1000
prob_lnorm_1000
#fitDistr(rockfall$energy, nbin = 99, plot = "qq") ~5min
prob_lnorm <- stats::plnorm(c(500, 1000), meanlog = lnrm_fit$estimate[1], sdlog = lnrm_fit$estimate[2], lower.tail = TRUE)
prob_lnorm_500_to_1000 <- (prob_lnorm[2] - prob_lnorm[1])
prob_lnorm_1000 <- (1 - prob_lnorm[2])
prob_lnorm_500_to_1000
prob_lnorm_1000
year_hours <- 8760
num_of_simulations <- 1000
num_of_failures <- 0
mass_in_net <- 0
rock_event <- function(speed, mass){
broken <- FALSE
energy <- (0.5 * mass * speed^2) / 1000
if (energy >= 1000){
broken <- TRUE
}else if (energy >= 500){
if (mass_in_net >= 2000){
broken <- TRUE
}
}
if (broken){
num_of_failures <<- num_of_failures + 1
}
mass_in_net <<- mass_in_net + mass
return(broken)
}
for (simulation in 1:num_of_simulations){
mass_in_net = 0
for (now in 1:year_hours){
if (now %% 24 == 8){
mass_in_net <<- 0
}
stonefall_out_1 <- runif(1, min = 0, max = 1)
stonefall_out_2 <- runif(1, min = 0, max = 1)
if (stonefall_out_1 > 0.972){
speed_1 <- rnorm(1, mean = nrm_fit_speed_out_1$estimate[1], sd = nrm_fit_speed_out_1$estimate[2])
mass_1 <- rlnorm(1, meanlog = lnrm_fit_mass_out_1$estimate[1], sdlog = lnrm_fit_mass_out_1$estimate[2])
broken <- rock_event(speed_1, mass_1)
if (broken){
break
}
}
if (stonefall_out_2 > 0.986){
speed_2 <- rnorm(1, mean = nrm_fit_speed_out_2$estimate[1], sd = nrm_fit_speed_out_2$estimate[2])
mass_2 <- rexp(1, rate = e_fit_mass_out_2$estimate[1])
broken <- rock_event(speed_2, mass_2)
if (broken){
break
}
}
}
}
prob <- num_of_failures / num_of_simulations
prob
num_of_failures
install.packages("DBI")
library("RPostgreSQL")
# define the database connection string
DB_HOST='server2053.cs.technik.fhnw.ch' # or 86.119.36.94 depending on the network
DB_PORT = 5432
DB_DBNAME = 'bank_db' # or 'warenkorb_db'
DB_USERNAME = 'db_user'
DB_PASSWORD = 'db_user_pw'
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# connect to the database
con <- dbConnect(drv, dbname = DB_DBNAME,
host = DB_HOST, port = DB_PORT,
user = DB_USERNAME, password = DB_PASSWORD)
dataClient = dbGetQuery(con, "SELECT *,
CASE WHEN MOD(birth_number / 100, 100) > 50 THEN
'f'
ELSE
'm'
END as gender,
CASE WHEN MOD(birth_number / 100, 100) > 50 THEN
TO_DATE(CONCAT('19', CAST(birth_number-5000 AS VARCHAR(6))), 'YYYYMMDD')
ELSE
TO_DATE(CONCAT('19', CAST(birth_number AS VARCHAR(6))), 'YYYYMMDD')
END as birthdate,
EXTRACT(YEAR FROM AGE('1998-12-31', CASE WHEN MOD(birth_number / 100, 100) > 50 THEN TO_DATE(CONCAT('19', CAST(birth_number-5000 AS VARCHAR(6))), 'YYYYMMDD') ELSE TO_DATE(CONCAT('19', CAST(birth_number AS VARCHAR(6))), 'YYYYMMDD') END)) as age
FROM client LIMIT 10")
print(dataClient)
dataTransaction = dbGetQuery(con, "SELECT
trans_id, account_id, date,
CASE type
WHEN 'PRIJEM' THEN 'credit'
WHEN 'VYDAJ' THEN 'withdrawal'
ELSE 'undefined'
END AS type,
CASE operation
WHEN 'VYBER KARTOU' THEN 'credit card withdrawal'
WHEN 'VKLAD' THEN 'credit in cash'
WHEN 'PREVOD Z UCTU' THEN 'collection from another bank'
WHEN 'VYBER' THEN 'withdrawal in cash'
WHEN 'PREVOD NA UCET' THEN 'remittance to another bank'
ELSE 'undefined'
END AS operation,
amount, balance,
CASE k_symbol
WHEN 'POJISTNE' THEN 'insurrance payment'
WHEN 'SLUZBY' THEN 'payment for statement'
WHEN 'UROK' THEN 'interest credited'
WHEN 'SANKC. UROK' THEN 'sanction interest if negative balance'
WHEN 'SIPO' THEN 'household'
WHEN 'DUCHOD' THEN 'old-age pension'
WHEN 'UVER' THEN 'loan payment'
ELSE 'undefined'
END AS k_symbol,
bank, account
FROM trans
order by date asc
LIMIT 10")
print(dataTransaction)
#str(district)
dbDisconnect(con)
dbUnloadDriver(drv)
library("RPostgreSQL")
# define the database connection string
DB_HOST='server2053.cs.technik.fhnw.ch' # or 86.119.36.94 depending on the network
DB_PORT = 5432
DB_DBNAME = 'bank_db' # or 'warenkorb_db'
DB_USERNAME = 'db_user'
DB_PASSWORD = 'db_user_pw'
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# connect to the database
con <- dbConnect(drv, dbname = DB_DBNAME,
host = DB_HOST, port = DB_PORT,
user = DB_USERNAME, password = DB_PASSWORD)
