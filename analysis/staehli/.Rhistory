print(count.fields(gold_users$account_id))
#trnskaiton runtergebrochen auf einene User
print(sum(gold_users$amount) / nrow((gold_users$account_id))
#trnskaiton runtergebrochen auf einene User
print(sum(gold_users$amount) / nrow((gold_users$account_id))
print(nrow(gold_users$account_id))
print(nrow(gold_users))
print(type(nrow(gold_users)))
print(typeof(nrow(gold_users)))
#trnskaiton runtergebrochen auf ein User
print(sum(gold_users$amount) / nrow((gold_users))
#trnskaiton runtergebrochen auf ein User
print(sum(gold_users$amount) / nrow(gold_users))
#trnskaiton runtergebrochen auf ein User
gold_one_user <- (sum(gold_users$amount) / nrow(gold_users))
print(gold_one_user)
classic_one_user <- (sum(classic_users$amount) / nrow(classic_users))
print(classic_one_user)
junior_one_user <- (sum(junior_users$amount) / nrow(junior_users))
one_user <- cbind(gold_one_user, classic_one_user, junior_one_user)
head(one_user)
ggplot(data = one_user) + geom_bar()
one_user <- data.frame(gold_one_user, classic_one_user, junior_one_user)
ggplot(data = one_user) + geom_bar()
ggplot(data = one_user, x = head) + geom_bar()
head(one_user)
one_user <- rbind.data.frame(gold_one_user, classic_one_user, junior_one_user)
print(one_user)
#Alle Transaktionen runtergebrochen auf ein User
gold_one_user <- round(sum(gold_users$amount) / nrow(gold_users), 0)
print(gold_one_user)
junior_one_user <- round(sum(junior_users$amount) / nrow(junior_users),0)
classic_one_user <- round(sum(classic_users$amount) / nrow(classic_users),0)
one_user <- data.frame("user_type" = c("gold","classic","junior", "amt_per_transaction" = c(gold_one_user, classic_one_user, junior_one_user))
str(one_user)
one_user <- data.frame("user_type" = c("gold","classic","junior", "amt_per_transaction" = c(gold_one_user, classic_one_user, junior_one_user)
str(one_user)
one_user <- data.frame("user_type" = c("gold","classic","junior"), "amt_per_transaction" = c(gold_one_user, classic_one_user, junior_one_user))
str(one_user)
head(one_user)
print("gold =", gold_one_user)
print("gold ="+ gold_one_user)
print(gold_one_user)
print(classic_one_user)
head(one_user)
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction)) + geom_bar()
ggplot(data = one_user, aes(x = user_type)) + geom_bar()
ggplot(data = one_user, aes(x = amt_per_transaction)) + geom_bar()
ggplot(data = one_user, aes(x = user_type, y = amt_pe)) + geom_col()
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction)) + geom_col()
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction)) + geom_col(position = "identity")
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction)) + geom_col(fill = user_type)
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction, fill = user_type)) + geom_col()
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction, fill = user_type)) + geom_col(alpha = 3/4)
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction, fill = user_type)) + geom_col(alpha = 1/2)
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction, fill = user_type)) + geom_col(alpha = 1/2) + coord_flip()
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction, fill = user_type)) + geom_col(alpha = 1/2, position = "dodge") + coord_flip()
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction, fill = user_type)) + geom_col(alpha = 1/2, position = "identity") + coord_flip()
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction, fill = user_type)) + geom_col(alpha = 1/2, position = "identity", head = "transaction on one customer") + coord_flip()
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction, fill = user_type)) + geom_col(alpha = 1/2, position = "identity", head = "transaction on one customer") + coord_flip() + labs(title = "transaction on one customer")
ggplot(data = one_user, aes(x = user_type, y = amt_per_transaction, fill = user_type)) + geom_col(alpha = 1/2, position = "identity") + coord_flip() + labs(title = "Transactions in relation to one user")
view(gold_users)
card_trans_lastyear <- filter(cards_trans, between(date, as.Date("1997-11-30"), as.Date("1998-11-30")))
view(card_trans_lastyear)
print(p_trans_op)
# Plot amount of payments for card types
p_trans_op <- ggplot(data = card_trans_lastyear, mapping = aes(x = transaction_operation, fill = card_type) )  + geom_bar(alpha = 1/2, position = "identity") + coord_flip()
print(p_trans_op)
# plot transaction types regarding to card type
p_trans_type <- ggplot(data = card_trans_lastyear, mapping = aes(x = transaction_type, fill = card_type)) +
geom_bar(alpha = 3/4, position = "dodge") + coord_flip() + labs(title = "All transaction in one year")
print(p_trans_type)
# Plot amount of payments for card types
p_trans_op <- ggplot(data = card_trans_lastyear, mapping = aes(x = transaction_operation, fill = card_type) )  + geom_bar(alpha = 1/2, position = "identity") + coord_flip() + labs(title = "All transaction in one year")
print(p_trans_op)
library(RPostgreSQL)
library(tidyverse)
DB_HOST='server2053.cs.technik.fhnw.ch' # or 86.119.36.94 depending on the network
DB_PORT = 5432
DB_DBNAME = 'bank_db' # or 'warenkorb_db'
DB_USERNAME = 'db_user'
DB_PASSWORD = 'db_user_pw'
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# connect to the database
con <- dbConnect(drv, dbname = DB_DBNAME,
host = DB_HOST, port = DB_PORT,
user = DB_USERNAME, password = DB_PASSWORD)
accounts_loans <- dbGetQuery(con,"SELECT account.account_id, account.district_id,
CASE
WHEN account.frequency = 'POPLATEK MESICNE' THEN 'monthly'
WHEN account.frequency = 'POPLATEK TYDNE' THEN 'weekly'
WHEN account.frequency = 'POPLATEK PO OBRATU' THEN 'after transaction'
END AS account_issuance,
account.date AS date_of_creation, loan.loan_id, loan.amount AS loan_amount, loan.duration,
loan.payments,
CASE
WHEN loan.status = 'A' THEN 'finished, OK'
WHEN loan.status = 'B' THEN 'finished, unpayed'
WHEN loan.status = 'C' THEN 'running, OK'
WHEN loan.status = 'D' THEN 'running, in debt'
END AS payment_status
FROM account
LEFT JOIN loan ON account.account_id = loan.account_id
GROUP BY account.account_id, loan.loan_id
ORDER BY account.date
")
head(accounts_loans)
ggplot(accounts_loans, aes(x = payment_status)) + geom_bar(alpha = 3/4, position = "identity")
view(accounts_loans)
#Most accounts didn't ever have loan
ggplot(accounts_loans, aes(x = payment_status)) + geom_bar(alpha = 3/4, position = "identity")
#Most accounts didn't ever have loan
ggplot(accounts_loans, aes(x = payment_status, fill = "blue")) + geom_bar(alpha = 3/4, position = "identity")
accounts_with_loans <- na.omit(accounts_loans$loan_amount)
view(accounts_with_loans)
accounts_with_loans <- na.omit(accounts_loans)
view(accounts_with_loans)
head(accounts_loans)
accounts_loans %>%
filter(account_id == 0 | district_id == 0 | date_of_creation == 0)
view()
accounts_loans %>%
filter(account_id == 0 | district_id == 0 | date_of_creation == 0) %>%
view()
ggplot(accounts_with_loans, aes(x = payment_status)) + geom_bar()
ggplot(accounts_with_loans, aes(x = payment_status)) + geom_bar() + coord_flip()
ggplot(accounts_with_loans, aes(x = payment_status)) + geom_bar(position = "count") + coord_flip()
ggplot(accounts_with_loans, aes(x = payment_status)) + geom_bar(position = "size") + coord_flip()
ggplot(accounts_with_loans, aes(x = payment_status)) + geom_bar() + coord_flip()
#Check if null values not in loan table
accounts_loans %>%
filter(account_id == 0 | district_id == 0 | date_of_creation == 0) %>%
view()
view(accounts_with_loans)
ggplot(accounts_with_loans, aes(x = date, y = amount, color = "payment_status")) + geom_point()
ggplot(accounts_with_loans, aes(x = date, y = loan_amount, color = "payment_status")) + geom_point()
DB_HOST='server2053.cs.technik.fhnw.ch' # or 86.119.36.94 depending on the network
DB_PORT = 5432
DB_DBNAME = 'bank_db' # or 'warenkorb_db'
DB_USERNAME = 'db_user'
DB_PASSWORD = 'db_user_pw'
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# connect to the database
con <- dbConnect(drv, dbname = DB_DBNAME,
host = DB_HOST, port = DB_PORT,
user = DB_USERNAME, password = DB_PASSWORD)
accounts_loans <- dbGetQuery(con,"SELECT account.account_id, account.district_id,
CASE
WHEN account.frequency = 'POPLATEK MESICNE' THEN 'monthly'
WHEN account.frequency = 'POPLATEK TYDNE' THEN 'weekly'
WHEN account.frequency = 'POPLATEK PO OBRATU' THEN 'after transaction'
END AS account_issuance,
account.date AS date_of_creation(acc), loan.loan_id,loan.date AS, loan.amount AS loan_amount, loan.duration,
loan.payments,
CASE
WHEN loan.status = 'A' THEN 'finished, OK'
WHEN loan.status = 'B' THEN 'finished, unpayed'
WHEN loan.status = 'C' THEN 'running, OK'
WHEN loan.status = 'D' THEN 'running, in debt'
END AS payment_status
FROM account
LEFT JOIN loan ON account.account_id = loan.account_id
GROUP BY account.account_id, loan.loan_id
ORDER BY account.date
")
head(accounts_loans)
library(RPostgreSQL)
library(tidyverse)
DB_HOST='server2053.cs.technik.fhnw.ch' # or 86.119.36.94 depending on the network
DB_PORT = 5432
DB_DBNAME = 'bank_db' # or 'warenkorb_db'
DB_USERNAME = 'db_user'
DB_PASSWORD = 'db_user_pw'
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# connect to the database
con <- dbConnect(drv, dbname = DB_DBNAME,
host = DB_HOST, port = DB_PORT,
user = DB_USERNAME, password = DB_PASSWORD)
accounts_loans <- dbGetQuery(con,"SELECT account.account_id, account.district_id,
CASE
WHEN account.frequency = 'POPLATEK MESICNE' THEN 'monthly'
WHEN account.frequency = 'POPLATEK TYDNE' THEN 'weekly'
WHEN account.frequency = 'POPLATEK PO OBRATU' THEN 'after transaction'
END AS account_issuance,
account.date AS date_of_creation(acc), loan.loan_id,loan.date AS, loan.amount AS loan_amount, loan.duration,
loan.payments,
CASE
WHEN loan.status = 'A' THEN 'finished, OK'
WHEN loan.status = 'B' THEN 'finished, unpayed'
WHEN loan.status = 'C' THEN 'running, OK'
WHEN loan.status = 'D' THEN 'running, in debt'
END AS payment_status
FROM account
LEFT JOIN loan ON account.account_id = loan.account_id
GROUP BY account.account_id, loan.loan_id
ORDER BY account.date
")
head(accounts_loans)
library(RPostgreSQL)
library(tidyverse)
DB_HOST='server2053.cs.technik.fhnw.ch' # or 86.119.36.94 depending on the network
DB_PORT = 5432
DB_DBNAME = 'bank_db' # or 'warenkorb_db'
DB_USERNAME = 'db_user'
DB_PASSWORD = 'db_user_pw'
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# connect to the database
con <- dbConnect(drv, dbname = DB_DBNAME,
host = DB_HOST, port = DB_PORT,
user = DB_USERNAME, password = DB_PASSWORD)
accounts_loans <- dbGetQuery(con,"SELECT account.account_id, account.district_id,
CASE
WHEN account.frequency = 'POPLATEK MESICNE' THEN 'monthly'
WHEN account.frequency = 'POPLATEK TYDNE' THEN 'weekly'
WHEN account.frequency = 'POPLATEK PO OBRATU' THEN 'after transaction'
END AS account_issuance,
account.date AS date_of_creation(acc), loan.loan_id,loan.date AS, loan.amount AS loan_amount, loan.duration,
loan.payments,
CASE
WHEN loan.status = 'A' THEN 'finished, OK'
WHEN loan.status = 'B' THEN 'finished, unpayed'
WHEN loan.status = 'C' THEN 'running, OK'
WHEN loan.status = 'D' THEN 'running, in debt'
END AS payment_status
FROM account
LEFT JOIN loan ON account.account_id = loan.account_id
GROUP BY account.account_id, loan.loan_id
ORDER BY account.date
")
head(accounts_loans)
#Most accounts didn't ever have loan
ggplot(accounts_loans, aes(x = payment_status)) + geom_bar(alpha = 3/4, position = "identity") + coord_flip()
library(RPostgreSQL)
library(tidyverse)
DB_HOST='server2053.cs.technik.fhnw.ch' # or 86.119.36.94 depending on the network
DB_PORT = 5432
DB_DBNAME = 'bank_db' # or 'warenkorb_db'
DB_USERNAME = 'db_user'
DB_PASSWORD = 'db_user_pw'
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# connect to the database
con <- dbConnect(drv, dbname = DB_DBNAME,
host = DB_HOST, port = DB_PORT,
user = DB_USERNAME, password = DB_PASSWORD)
accounts_loans <- dbGetQuery(con,"SELECT account.account_id, account.district_id,
CASE
WHEN account.frequency = 'POPLATEK MESICNE' THEN 'monthly'
WHEN account.frequency = 'POPLATEK TYDNE' THEN 'weekly'
WHEN account.frequency = 'POPLATEK PO OBRATU' THEN 'after transaction'
END AS account_issuance,
account.date AS date_account_creation, loan.loan_id,loan.date , loan.amount AS loan_amount, loan.duration,
loan.payments,
CASE
WHEN loan.status = 'A' THEN 'finished, OK'
WHEN loan.status = 'B' THEN 'finished, unpayed'
WHEN loan.status = 'C' THEN 'running, OK'
WHEN loan.status = 'D' THEN 'running, in debt'
END AS payment_status
FROM account
LEFT JOIN loan ON account.account_id = loan.account_id
GROUP BY account.account_id, loan.loan_id
ORDER BY account.date")
head(accounts_loans)
#Most accounts didn't ever have loan
ggplot(accounts_loans, aes(x = payment_status)) + geom_bar(alpha = 3/4, position = "identity") + coord_flip()
#Check if null values not in loan table
accounts_loans %>%
filter(account_id == 0 | district_id == 0 | date_of_creation == 0) %>%
view()
#Check if null values not in loan table
accounts_loans %>%
filter(account_id == 0 | district_id == 0 | date_account_creation == 0) %>%
view()
#Check if null values not in loan table
accounts_loans %>%
filter(account_id == 0 | district_id == 0 | date_account_creation == 0) == 0
#Check if null values not in loan table
accounts_loans %>%
filter(account_id == 0 | district_id == 0 | date_account_creation == 0) = 0
head(accounts_loans)
view(accounts_with_loans)
ggplot(accounts_with_loans, aes(x = payment_status)) + geom_bar() + coord_flip()
ggplot(accounts_with_loans, aes(x = payment_status, color = "red")) + geom_bar() + coord_flip()
ggplot(accounts_with_loans, aes(x = payment_status, colorfill = "red")) + geom_bar() + coord_flip()
ggplot(accounts_with_loans, aes(x = date, y = loan_amount, color = "payment_status")) + geom_point()
view(accounts_with_loans)
head(accounts_loans)
# filter dataframe not empty values
accounts_with_loans <- na.omit(accounts_loans)
view(accounts_with_loans)
# filter dataframe not empty values
accounts_with_loans <- na.omit(accounts_loans) %>%
rename(date = "date of loan")
# filter dataframe not empty values
accounts_with_loans <- na.omit(accounts_loans) %>%
rename(date = date_of_loan)
# filter dataframe not empty values
accounts_with_loans <- na.omit(accounts_loans) %>%
rename(date_of_loan = date)
view(accounts_with_loans)
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount)) + geom_point()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, color = payment_status)) + geom_point()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, color = payment_status)) + geom_area()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_area()
view(accounts_with_loans)
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_count()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_density()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_histogram()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_histogram()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_histogram()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_polygon()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_qq()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_point()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_point()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, shape = payment_status)) + geom_point()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, fill = payment_status)) + geom_point()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, color = payment_status)) + geom_point()
ggplot(accounts_with_loans, aes(x = date_of_loan)) + geom_point()
ggplot(accounts_with_loans, aes(x = date_of_loan)) + geom_histogram()
ggplot(accounts_with_loans, aes(x = date_of_loan)) + geom_blank()
ggplot(accounts_with_loans, aes(x = date_of_loan)) + geom_count()
ggplot(accounts_with_loans, aes(x = date_of_loan)) + geom_boxplot()
ggplot(accounts_with_loans, aes(x = date_of_loan, y= loan_amount)) + geom_boxplot()
ggplot(accounts_with_loans, aes(group = date, x = date_of_loan, y= loan_amount)) + geom_boxplot()
ggplot(accounts_with_loans, aes(x = date_of_loan)) + geom_polygon()
ggplot(accounts_with_loans, aes(x = date_of_loan)) + geom_qq()
ggplot(accounts_with_loans, aes(x = date_of_loan)) + geom_density()
ggplot(accounts_with_loans, aes(x = date_of_loan)) + geom_polygon()
ggplot(accounts_with_loans, aes(x = date_of_loan)) + geom_histogram()
ggplot(accounts_with_loans, aes(x = duration)) + geom_histogram()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = duration)) + geom_histogram()
accounts_with_loans %>%
ggplot(aes(x = accounts_with_loans$date_of_loan, y = accounts_with_loans$loan_amount)) +
geom_histogram()
ggplot(aes(x = accounts_with_loans$date_of_loan, y = accounts_with_loans$loan_amount)) +
geom_histogram()
ggplot(accounts_with_loans,aes(x = accounts_with_loans$date_of_loan, y = accounts_with_loans$loan_amount)) +
geom_histogram()
ggplot(accounts_with_loans,aes(x = accounts_with_loans$date_of_loan, y = accounts_with_loans$loan_amount)) +
geom_point()
ggplot(accounts_with_loans,aes(x = accounts_with_loans$date_of_loan)) +
geom_area()
ggplot(accounts_with_loans,aes(x = accounts_with_loans$date_of_loan)) +
geom_histogram()
ggplot(accounts_with_loans,aes(x = accounts_with_loans$date_of_loan)) +
geom_histogram(binwidth=10, fill="#69b3a2", color="#e9ecef", alpha=0.9)
ggplot(accounts_with_loans,aes(x = accounts_with_loans$date_of_loan)) +
geom_histogram(binwidth=5, fill="#69b3a2", color="#e9ecef", alpha=0.9)
ggplot(accounts_with_loans,aes(x = accounts_with_loans$date_of_loan)) +
geom_histogram(binwidth=30, fill="#69b3a2", color="#e9ecef", alpha=0.9)
ggplot(accounts_with_loans,aes(x = accounts_with_loans$date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9)
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9)
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) + labs(title = "Amount of loans at time")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") + scale_x_continuous(breaks = c(1993,1994,1995,1996,1997,1998))
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") + scale_x_continuous(breaks = as.Date(c(1993,1994,1995,1996,1997,1998)) )
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_continuous(breaks = as.Date(c(01-01-1993,01-01-1994,01-01-1995,01-01-1996,01-01-1997,01-01-1998)) )
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_continuous(breaks = c(01-01-1993,01-01-1994,01-01-1995,01-01-1996,01-01-1997,01-01-1998))
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_continuous(labels = c(1993, 1994, 1995, 1996, 1997, 1998))
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=5, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=10, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "1 year")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "month")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7dcef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7dc", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y")
e
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y")
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y") +
geom_smooth(method='lm', formula= y~x)
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y") +
geom_smooth(method='lm', formula= y~)
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y") +
geom_smooth(method='lm', formula= x)
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y") +
geom_smooth(method='lm', formula= x~)
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y") +
geom_smooth(method='lm')
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, color = payment_status)) +
geom_point() + geom_smooth(method='lm')
ggplot(accounts_with_loans,aes(x = date_of_loan)) +
geom_histogram(binwidth=15, fill="#69b3a2", color="#e7ecef", alpha=0.9) +
labs(title = "Amount of loans at time") +
scale_x_date(date_breaks = "year", date_labels = "%Y")
view()
accounts_with_loans_count <- accounts_with_loans %>%
transmute(date_of_loan = group_by(date_of_loan) )
view(accounts_with_loans_count)
accounts_with_loans_count <- accounts_with_loans %>%
transmute(date_of_loan = unique(date_of_loan) )
accounts_with_loans_count <- accounts_with_loans %>%
transmute(date_of_loan_1 = unique(date_of_loan) )
accounts_with_loans_count <- accounts_with_loans %>%
transmute(unique(date_of_loan) = date_of_loan  )
#calculate new row with count values
accounts_with_loans_count <- accounts_with_loans %>%
transmute(unique_date = unique(date_of_loan), count_loan_per_day = add_tally(date_of_loan)) %>%
view(accounts_with_loans_count)
#calculate new row with count values
accounts_with_loans_count <- accounts_with_loans %>%
transmute(count_loan_per_day = add_tally(date_of_loan)) %>%
view(accounts_with_loans_count)
#calculate new row with count values
accounts_with_loans_count <- accounts_with_loans %>%
transmute(count_loan_per_day = add_tally(date_of_loan)) %>%
view(accounts_with_loans_count)
#calculate new row with count values
accounts_with_loans_count <- accounts_with_loans %>%
transmute(count_loan_per_day = add_count(date_of_loan)) %>%
view(accounts_with_loans_count)
#calculate new row with count values
accounts_with_loans_count <- accounts_with_loans %>%
transmute(count_loan_per_day = add_count(date_of_loan)) %>%
view(accounts_with_loans_count)
#calculate new row with count values
accounts_with_loans_count <- accounts_with_loans %>%
transmute(count_loan_per_day = add_count(as.numeric(date_of))) %>%
view(accounts_with_loans_count)
#calculate new row with count values
accounts_with_loans_count <- accounts_with_loans %>%
transmute(count_loan_per_day = add_count(as.numeric(date_of_loan))) %>%
view(accounts_with_loans_count)
