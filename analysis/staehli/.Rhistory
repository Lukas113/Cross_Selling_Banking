scale_x_continuous(breaks = seq(10,90,5))
data_clients_wihtout_credit_card_by_age_range_0_25 <- get_clients_without_credit_card_by_age_range(0, 25)
head(data_clients_wihtout_credit_card_by_age_range_0_25)
data_clients_wihtout_credit_card_by_age_range_24_100 <- get_clients_without_credit_card_by_age_range(24, 100)
head(data_clients_wihtout_credit_card_by_age_range_24_100)
source('inc/header.R')
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
scale_fill_cb <- scale_fill_manual(values = cbPalette)
scale_color_cb <- scale_color_manual(values = cbPalette)
data_accounts_running_total <- get_accounts_running_total()
ggplot(data_accounts_running_total, aes(x=date, y=accounts_running_total)) +
geom_line() +
labs(x="Jahr", y="Kumulierte Anzahl Konten", title="Kumulierte Anzahl Konten von 1.1.1993 bis 29.12.1997")
data_count_by_gender <- get_count_by_gender()
ggplot(data_count_by_gender, aes(x=gender, y=count, fill = gender)) +
geom_bar(stat = "identity", color = "black") +
geom_text(aes(label=count), vjust=-0.5) +
labs(x="Geschlecht", y="Anzahl Kunden", title="Anzahl Kunden pro Geschlecht") +
scale_fill_cb
data_all_clients_age <- get_all_clients_age()
ggplot(data_all_clients_age, aes(x=age)) +
geom_histogram(binwidth=5, color = "black", fill = "grey") +
scale_x_continuous(breaks = seq(0, 100, 10)) +
labs(x="Alter", y="Anzahl Kunden", title="Verteilung aller Kunden pro Alter (Stichtag: 31.12.1998)")
all_clients_join_region_ctype <- get_all_clients_join_region_ctype()
all_clients_join_region_ctype$type <- replace_na(data = all_clients_join_region_ctype$type,
replace = "Keine Karte")
all_clients_join_region_ctype$type <- gsub(pattern = "classic",
replacement = "Classic",
x = all_clients_join_region_ctype$type)
all_clients_join_region_ctype$type <- gsub(pattern = "junior",
replacement = "Junior",
x =all_clients_join_region_ctype$type)
all_clients_join_region_ctype$type <- gsub(pattern = "gold",
replacement = "Gold",
x = all_clients_join_region_ctype$type)
##  Visualisierung Anzahl Kunden und Kartentypen nach Region eingeteilt
all_clients_join_region_ctype %>%
ggplot(aes(x = region, fill = type)) +
geom_bar(position = "stack", color = "black") +
labs(title = "Anzahl der Kunden nach Region", subtitle = "Gesamtanzahl Kunden: 5369", fill = "Kartentyp") +
xlab(label = "Regionen") +
ylab(label = "Anzahl der Konten") +
coord_flip() +
scale_fill_cb
data_owner_disp <- get_owner_disp()
accounts_with_count <- data_owner_disp %>%
group_by(count_users) %>%
summarise(count_users_new = n())
accounts_with_count_owners <- accounts_with_count$count_users_new[1]
accounts_with_count_own_disp <- accounts_with_count$count_users_new[2]
data_owner_disp %>%
ggplot(aes(x = count_users, fill = if_else(count_users == 1, "OWNER", "OWNER, DISPONENT"))) +
geom_bar(color = "black", show.legend = FALSE) +
geom_text(stat = "count", aes(label = ..count.. , vjust = -0.5) ) +
ylab(label = "Anzahl") +
xlab(label = "") +
scale_x_continuous(breaks = c(1,2), labels = c("OWNER", "OWNER, DISPONENT")) +
labs(title = "Unterteilung der Konten von 4500 Observationen",
subtitle = "Unterteilung in Kunden mit Owner und Owner/Disponent") +
scale_fill_cb
account_loans <- as_tibble(get_account_loans())
account_loans
account_loans %>%
ggplot(aes(x = count, fill = if_else(count == 0, "Kredit", "ohne Kredit"))) +
geom_bar(color = "black", show.legend = FALSE) +
scale_x_continuous(breaks = c(0, 1),labels = c("Konten ohne Kredit", "Konten mit Kredit")) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(title = "Konten mit und ohne Kredite (ges. 4500)") +
xlab(label = "") +
ylab(label = "Anzahl Konten") +
scale_fill_cb
accounts_loans <- get_accounts_with_loans()
## Anzeige Loan Status (Code)
accounts_with_loans <- na.omit(accounts_loans) %>%
rename(date_of_loan = date) %>%
mutate(running_finished = if_else(str_detect(string = payment_status, pattern = "finished") ,
"Finished", "Running"))
## Anzeige Loan Status (Plot)
accounts_with_loans %>%
ggplot(aes(x = payment_status, fill = running_finished)) +
geom_bar(color= "black") +
xlab(label = "Kreditstatus") +
ylab(label = "Anzahl der Konten") +
scale_fill_cb +
labs(title = "Anzahl der Kreditstatus", subtitle = "Die Balken zeigen die Anzahl der Loans mit deren Bezahlstatus von gesamthaft 682 Krediten") +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5)
## Anzeige der ausgestellten Loans pro Monat (Code)
accounts_with_loans_loandate_only <- accounts_with_loans %>%
transmute(date_of_loan) %>%
arrange() %>%
separate(col = date_of_loan,into = c("year", "month", "day") ,sep = "-", convert = ) %>%
unite(c("year", "month") ,col = date_loan_yr_mth, sep = "-") %>%
transmute(date_loan_yr_mth) %>%
group_by(date_loan_yr_mth) %>%
summarise(loan_count = n())
## Anzege der ausgestellten Loans pro Monat (Plot)
accounts_with_loans_loandate_only %>%
ggplot(aes(x = date_loan_yr_mth, y = loan_count)) +
geom_col(color = "black", fill = "grey")+
labs(title = "Anzahl ausgestellte Loans auf Monate aufgeteilt",
subtitle = "Anzeige der ausgestellten Loans pro Monat") +
scale_x_discrete(breaks = c("1993-01", "1994-01","1995-01", "1996-01","1997-01","1998-01"))+
xlab(label = "Zeitachse in Jahre") +
ylab(label = "Anzahl Loans")
loan_clients <- get_loan_clients()
## Darstellung ausgestellte Lonas nach geschlecht und Bezahlstatus (Plot)
loan_clients %>%
ggplot(aes(x = gender, fill = loan_status)) +
geom_bar(color = "black", position = "dodge") +
labs(title = "Kreditvergabe nach Geschlecht und deren Status", fill = "Kreditstatus") +
scale_fill_cb +
xlab( "Geschlecht") +
ylab("Anzahl ausgestellte Kredite")
## Berechnung Alter wenn Kredit gegeben (Code)
loan_clients_when_loan <- loan_clients %>%
transmute(diff_years_age_loan = round(as.integer(as.Date("1998-12-31")- loan_date)/365, 0), age,
gender,loan_amount, loan_status) %>%
mutate(age_when_loan = age - diff_years_age_loan) %>%
mutate(age_bins = cut(x = age_when_loan, breaks = c(12, 25, 35, 45, 55, 63)))
## Altersgruppierungen Anzahl
loan_clients_age_bin <- loan_clients_when_loan %>%
mutate(age_bins = cut(x = age_when_loan, breaks = c(12, 25, 35, 45, 55, 63))) %>%
group_by(age_bins) %>%
summarise(age_bins_count = n())
summary(loan_clients$age)
summary(loan_clients$loan_amount)
## Berechnung Alter wenn Kredit gegeben (Plot)
loan_clients_when_loan %>%
ggplot(aes(x = age_bins, y = loan_amount, fill = gender)) +
geom_boxplot(notch = TRUE) +
scale_y_comma() +
scale_fill_cb +
labs(title = "Kredithöhe nach Altersgruppierungen", subtitle = "Gesamtzahl Observationen: 682",
caption = "13-25j: 108 obs. / 26-35j: 168 obs. / 36-45j: 153 obs. / 46-55j: 154obs. / 56-62j: 99obs.") +
scale_x_discrete(labels = c("13-25j", "26-35j", "36-45j", "46-55j", "56-62j")) +
xlab("Altersgruppierungen") +
ylab("Höhe des Kredits")
summary(loan_clients_when_loan$age_when_loan)
accounts_services <- get_accounts_services()
## Alle Dienstleistungen vor Ausstellung der Karte
accounts_services_loan_order <- accounts_services %>%
filter(card_issued <= "1998-12-31" & card_issued >= "1998-01-01") ## Alle Karten ausgestellt in 1998
## Alle ausgestellten Kredite vor und nach Ausstellung der Karte (nur Personen die Kredit haben!)
accounts_services_1year_before_card_loan <- accounts_services_loan_order %>%
select(card_issued, loan_date) %>%
na.omit(loan_date) %>% ## Entferne alle Konten ohne Kredit
mutate(loan_days_before_card = card_issued - loan_date)
## Anzahl der Observationen für Konten mit Kreditkarte und einem Kredit
accounts_services_1year_before_card_loan_count <- as.integer(count(accounts_services_1year_before_card_loan))
accounts_services_1year_before_card_loan %>%
ggplot(aes(loan_days_before_card)) +
geom_density(fill =  "grey", color = "black", adjust = 3/4) +
scale_x_continuous(breaks = c( 0, 365, 365*2, 365*3, 365*4, 365*5 ),
labels = c( "Karte ausgestellt", "1y", "2y", "3y", "4y", "5y") ) +
xlab("Tage vor Ausstellung Karte") +
ylab("Dichte") +
labs(title = "Dienstleistung Kredit vor Ausstellung der Kreditkarte",
subtitle = paste("Anzahl Observationen:", accounts_services_1year_before_card_loan_count))
## Alle ausgestellten Daueraufträge vor und nach Ausstellung der Karte (nur Personen, die einen DA haben!)
accounts_services_1year_before_card_order <- accounts_services_loan_order %>%
select(card_issued, order_date) %>%
na.omit(order_date) %>% ## Entferne alle Konten ohne DA
mutate(order_days_before_card = card_issued - order_date)
## Anzahl der Observationen für Konten mit Kreditkarte und einem Kredit
accounts_services_1year_before_card_order_count <- as.integer(count(accounts_services_1year_before_card_order))
accounts_services_1year_before_card_order %>%
ggplot(aes(order_days_before_card)) +
geom_density(fill =  "grey", color = "black", adjust =3/4) +
scale_x_continuous(breaks = c( 0, 365, 365*2, 365*3, 365*4, 365*5 ),
labels = c( "Karte ausgestellt", "1y", "2y", "3y", "4y", "5y") ) +
xlab("Tage vor Ausstellung Karte") +
ylab("Dichte") +
labs(title = "Dienstleistung Dauerauftrag vor Ausstellung der Kreditkarte",
subtitle = paste("Anzahl Observationen:", accounts_services_1year_before_card_order_count))
data_card_count_by_card_type <- get_card_count_by_card_type()
ggplot(data_card_count_by_card_type, aes(x=type, y=count)) +
geom_bar(stat = "identity", color = "black", fill = "grey") +
geom_text(aes(label=count), vjust=-0.5) +
labs(x="Kreditkarten Typ", y="Anzahl Kreditkarten", title="Anzahl ausgestelle Karten pro Kartentyp")
data_distinct_accounts_by_card <- get_distinct_accounts_by_card()
head(data_distinct_accounts_by_card)
data_card_count_by_disp_type <- get_card_count_by_disp_type()
head(data_card_count_by_disp_type)
data_client_age_by_issued_date <- get_client_age_by_issued_date()
ggplot(data = data_client_age_by_issued_date, mapping = aes(x = age_on_card_issue, color=type)) +
geom_freqpoly(binwidth=4) +
labs(x="Alter beim Ausstelldatum der Kreditkarte", y="Anzahl Kreditkarten", title="Alter der Kunden beim Ausstelldatum der Kreditkarte")
data_client_age_by_issued_date <- get_client_age_by_issued_date()
data_clients_without_credit_card_0_100 <- get_clients_without_credit_card_by_age_range(0, 100)
ggplot() +
geom_freqpoly(data = data_client_age_by_issued_date, mapping = aes(x = age_on_card_issue), binwidth=4, color="blue") +
geom_freqpoly(data = data_clients_without_credit_card_0_100, mapping = aes(x = age), binwidth=4, color="red") +
xlab('Alter') +
ylab('Anzahl') +
scale_x_continuous(breaks = seq(10,90,5)) +
labs(x="Alter", y="Anzahl Kunden", title="Alter der Kunden Ausstelldatum Kreditkarte / Kunden ohne Karte (31.12.1998)")
data_clients_wihtout_credit_card_by_age_range_0_25 <- get_clients_without_credit_card_by_age_range(0, 25)
head(data_clients_wihtout_credit_card_by_age_range_0_25)
data_clients_wihtout_credit_card_by_age_range_24_100 <- get_clients_without_credit_card_by_age_range(24, 100)
head(data_clients_wihtout_credit_card_by_age_range_24_100)
disconnect()
source('inc/header.R')
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
scale_fill_cb <- scale_fill_manual(values = cbPalette)
scale_color_cb <- scale_color_manual(values = cbPalette)
data_accounts_running_total <- get_accounts_running_total()
library("RPostgreSQL")
library("tidyverse")
library("ggridges")
library("hrbrthemes")
library("stringr")
library("scales")
library("DescTools")
source('../helpers/prepareData.R')
# define the database connection string
DB_HOST='server2053.cs.technik.fhnw.ch' # or 86.119.36.94 depending on the network
DB_PORT = 5432
DB_DBNAME = 'bank_db' # or 'warenkorb_db'
DB_USERNAME = 'db_user'
DB_PASSWORD = 'db_user_pw'
# load the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# connect to the database
con <- dbConnect(drv, dbname = DB_DBNAME,
host = DB_HOST, port = DB_PORT,
user = DB_USERNAME, password = DB_PASSWORD)
## Anzahl Accounts mit mehreren Nutzern
account_owner_disp <- get_owner_disp()
account_owner_disp %>%
ggplot(aes(x = count_users)) +
geom_bar(fill = "lightblue", color = "black") +
geom_text(stat = "count", aes(label = ..count.. , vjust = -0.5) ) +
ylab(label = "amount") +
scale_x_continuous(breaks = c(1,2), labels = c("OWNER", "OWNER, DISPONENT"))
# LAG Function zum Differenz der Spalten ausrechnen
difference_in_time <- permanent_orders %>%
group_by(orders_id) %>%
mutate(dif_in_days = date - lag(date))
average_time_p_orders <- mean(difference_in_time$dif_in_days, na.rm = TRUE) #Calculation of average time (30d)
account_loans <- as_tibble(get_account_loans())
head(account_loans)
account_loans %>%
ggplot(aes(x = count, fill = count)) +
geom_bar(fill = "lightblue", color = "black") +
scale_x_continuous(breaks = c(0, 1),labels = c("Accounts without Loan", "Accounts with Loan")) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(title = "Accounts with Loans and without Loans") +
xlab(label = "") +
ylab(label = "Amount of Accounts")
#Most accounts didn't ever have loan
ggplot(accounts_loans, aes(x = payment_status)) +
geom_bar(alpha = 3/4, position = "identity") +
coord_flip()
#Check if null values not in loan table
accounts_loans %>%
filter(account_id == 0  | date_account_creation == 0)
# filter dataframe not empty values and rename date column
accounts_with_loans <- na.omit(accounts_loans) %>%
rename(date_of_loan = date)
ggplot(accounts_with_loans, aes(x = payment_status)) +
geom_bar() +
coord_flip()
ggplot(accounts_with_loans, aes(x = date_of_loan, y = loan_amount, color = payment_status)) +
geom_point(binwidth=15) +
geom_smooth(method='lm',binwidth=15) +
scale_x_date(date_breaks = "year", date_labels = "%Y")
str(accounts_with_loans)
#calculate new row with count values for plotting
accounts_with_loans_count <- as.data.frame(transmute(accounts_with_loans,
loan_amount, loan_id)) %>% arrange(loan_id)
str(accounts_with_loans_count)
colMeans(accounts_with_loans_count[1], na.rm = FALSE)
accounts_with_loans_loandate_only <- accounts_with_loans %>%
transmute(date_of_loan) %>%
arrange() %>%
separate(col = date_of_loan,into = c("year", "month", "day") ,sep = "-", convert = ) %>%
unite(c("year", "month") ,col = date_loan_yr_mth, sep = "-") %>%
transmute(date_loan_yr_mth) %>%
group_by(date_loan_yr_mth) %>%
summarise(loan_count = n())
accounts_with_loans_loandate_only %>%
ggplot(aes(x = date_loan_yr_mth, y = loan_count)) +
geom_col(color = "black")+
labs(title = "Anzahl ausgestellte Loans auf Monate aufgeteilt",
subtitle = "Anzeige der ausgestellten Loans pro Monat") +
scale_x_discrete(breaks = c("1993-01", "1994-01","1995-01", "1996-01","1997-01","1998-01"))+
xlab(label = "Zeitachse in Jahre") +
ylab(label = "Anzahl Loans")
#Aesthtetics
color_fill  <- scale_fill_brewer(palette = "Pastel1")
scales_comma <- scale_x_continuous(labels = comma)
# Palette für Farbenblinde:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# Welche Accounts hatten vor Ausstellung einer Karte bereits einen Loan und wie sah es bez. Kartentyp aus
# Remark zu plot:  Tag 0 entspricht Ausstellung der Karte
card_types_loans_timediff <- card_types_loans %>%
filter(loan_date < card_issued) %>%
mutate(time_diff_loan_card = abs(difftime(loan_date, card_issued)))
# Welche Accounts hatten vor Ausstellung einer Karte bereits einen Loan und wie sah es bez. Kartentyp aus
# Remark zu plot:  Tag 0 entspricht Ausstellung der Karte
ggplot(card_types_loans_timediff, aes(time_diff_loan_card, fill = type)) +
geom_density(alpha = 0.8) +
color_fill +
labs(title = "Date from loan to card")
# Wie sehen die Loan AMounts zu den einzelnen Kartentypen aus?
card_types_loans %>%
ggplot(aes(x = amount, fill = type)) + geom_density(alpha = 0.5) +
color_fill +
labs( title = "Loan amount on card type") + scale_x_continuous(labels = comma)
# Monatliche Zahlungen nach Kartentype
card_types_loans %>%
ggplot(aes(x = payments, fill = type)) +
geom_density(alpha = 0.5) + color_fill +
labs( title = "Monthly Payments on card_type") +
scale_x_continuous(labels = comma)
# Wie sieht das Kreditvolumen im Bezug auf die Dauer aus?
card_types_loans %>%
ggplot(aes(x = duration, y = amount, fill = type)) +
geom_col(position = "dodge") +
scale_y_continuous(labels = comma) +
scale_x_continuous(breaks = card_types_loans$duration) +
color_fill
## Lade Date aus Funktion
#### Es werden nur OWNER berücksichtigt! Obs aus allen Jahren
loan_clients <- get_loan_clients() ## 682 obs.
##Ästhetik
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
scale_fill_cb <- scale_fill_manual(values = cbPalette)
## stats
summary(loan_clients[2]) ## zusmfassung Kredithöhe
summary(loan_clients[7]) ## zsuamfassung Kreditalter
#Gleiche Anzahl Loans für Mann und Frau (Kartentypen sehen ebenfalls identisch aus)
loan_clients %>%
ggplot(aes(x = gender)) +
geom_bar(alpha = 3/4) +
labs(title = "Anz. M/F, welche einen Loan haben") +
scale_fill_cb +
geom_text(stat = "count", aes(label = ..count.., vjust = -0.5))
## Mit identifizierung des Loan status
loan_clients %>%
ggplot(aes(x = gender, fill = loan_status)) +
geom_bar(alpha = 3/4) +
labs(title = "Anz. M/F, welche einen Loan haben") +
scale_fill_cb
### Alterverteilung aller Loans
loan_clients %>%
ggplot(aes(x = age)) +
geom_density(fill = "lightblue") +
scale_fill_cb +
labs(title = "Alterverteilung der Loans")
#Verteilung des Alters im Bezug auf Loans und Payment_status
loan_clients %>%
ggplot(aes(x = age, fill = loan_status)) +
geom_histogram(alpha = 1/3, binwidth = 1) +
labs(title = "Altersverteilung und Loanstatus") +
scale_fill_cb +
facet_wrap(~loan_status)
### Verteilung der Kredite auf Altersgruppen (0-25 / 25-40 / 40 - 60 / 60+)
loan_clients %>%
mutate( age_group = cut(age,breaks=c(0,25,40,60,100))) %>%
ggplot(aes(x = age_group, y = loan_amount, fill = gender)) +
geom_boxplot(notch = TRUE) + ## Notches = stat. Unterschiede = 95% Konfidenzintervall
scale_x_discrete(labels =  c("<25 Jahre", "25-40 Jahre", "40-60 Jahre", "60< Jahre")) +
scale_y_comma() +
scale_fill_cb +
labs(title = 'Kredithöhe nach Alter und Geschlecht')
#Âesthetic Mappings
library(fmsb)
### Mehrmals verwendete Variablen
color_fill<- scale_fill_brewer(palette = "Set2")
### Laden der Daten aus Funktion
all_clients <- get_all_clients()
#Verteilung des Alters und Geschlechts
all_clients %>%
ggplot(aes(x = age, fill = gender)) +
geom_density(alpha = 1/3) +
color_fill
#Verteilung des Geschlechts nach Wohndistrikte und nach Kartentypen
all_clients_join_region_ctype <- get_all_clients_join_region_ctype()
# MEnge aller Kunden zugeordnet zu den Distrikten
all_clients_join_region_ctype %>%
ggplot(aes(x = region, fill = type)) +
geom_bar(alpha = 1/2, position = "stack") +
labs(title = "Amount of Customers in Regions") +
coord_flip()
# Altersveteilung nach Kartentyp
plot_all_types_age <- function(type_card, title_diagramm){
all_clients_join_region_ctype %>%
filter(type == type_card) %>%
ggplot(aes(x = age, fill = type)) +
geom_density(alpha = 1/2, fill = "lightblue") +
labs(title = title_diagramm )
}
plot_all_types_age("junior", "Altersverteilung Junior-Karte")
plot_all_types_age("gold", "Altersverteilung Junior-Karte")
plot_all_types_age("classic", "Altersverteilung Junior-Karte")
summary(all_clients_join_region_ctype$age)
#Alterverteilung in den Distrikten
ggplot(all_clients_join_region_ctype, aes(x = age, fill = region)) +
geom_density(alpha = 1/2) +
facet_wrap(~region, ncol= 2) +
color_fill +
scale_x_continuous(breaks = seq(0,90,15))
ggplot(all_clients_join_region_ctype, aes(x = age, y = region, fill = region)) +
geom_density_ridges(alpha = 1/2) +
scale_fill_brewer(palette = "YlOrRd") +
scale_x_continuous(breaks = seq(0,90,10))
#Amount of cards in district
ggplot(client_card_districts, aes(x = district_id, color = card_type)) +
geom_freqpoly(binwidth = 1, alpha = 3/4) + labs(title = "Amount of all customers in districts" ) +
scale_x_continuous(breaks = seq(1,77,3)) + coord_cartesian(xlim = 1:77, ylim = 1:200)  #Richtig skalieren!!
#Anzahl Karten runtergebrochen auf einen Kartennutzer
card_district_one_usr <- client_card_districts %>%
select(district_id, card_type, no_inhabitants) %>%
group_by(district_id, card_type, no_inhabitants) %>%
summarise(number_of_cards = n()) %>%
mutate(no_cards_per_inhabitant = round((number_of_cards / no_inhabitants)*1000, 3)) %>%
filter(card_type != FALSE) #unbekannte Zellenwerte card_type nicht miteinbez. #%>% view()
#Plot Karten aller User im Bezug auf einen Distrikt
ggplot(card_district_one_usr, aes(x = district_id, y = no_cards_per_inhabitant, color = card_type)) +
geom_line(alpha = 3/4) + scale_x_continuous(breaks= seq(1,77,3))+
labs(title = "Card_types per head") + xlab(label = "districts") +
coord_cartesian(xlim = 1:77, ylim = range(0,0.25,0.1)) #zoom in
### Laden des Datensatzes
disp_transactions <- get_disp_transactions()
### Dataframe speichern als Tibble (bessere Performanz)
disp_transactions <- disp_transactions %>% #convert dataframe to a tibble
as_tibble(disp_transactions)
#Alle Transaktinen pro Jahr (Alle Inhabertypen)
trans_per_year <- disp_transactions %>%
separate(date, sep = "-", into = c("year", "month", "day") ) %>%
transmute(trans_id, type, year, transaction_type,
transaction_operation = replace_na(transaction_operation, replace = "no information" ))
# Alle Transaktionen von allen Jahren von allen Kunden geordnet nach Transaktionstyp
trans_per_year %>%
ggplot(aes(x = year, fill = transaction_operation)) +
geom_bar(alpha = 3/4, position = "dodge") +
scale_fill_brewer(palette = "Set3") +
scale_color_brewer(palette = "Set3") +
labs(title = "Amount of transactions of all disponents per year") +
ylab("transactions")
### Load Data from function
check_services <- as_tibble(get_check_services_all())
head(check_services)
### Mehrfachgebrauchte Operationen als Variablen oder Funktionen
caption_label_service_code <- labs(caption = "3-Digit Code: 1xx = card / x1x = loan / xx1 = order")
## Alle DL bezogen im Jahr 1998 von allen Leuten die eine Karte haben
#Stimmt nicht mit anzahl orders überein wenn SQL abfrage gemacht/gGrund: Nur Personen mit Karte von 1998
comparisson_services <- check_services %>%
transmute(account_id, age, account_type,
card_YesNo = if_else(is.na(card_id) == FALSE, 1, 0 ),
loan_YesNo = if_else(is.na(loan_id) == FALSE, 1, 0),
order_YesNo = if_else(is.na(orders_id) == FALSE, 1, 0)) %>%
filter(account_type == "OWNER") %>%
unite(card_loan_order, c("card_YesNo","loan_YesNo", "order_YesNo"), sep = "" ) %>%
distinct(account_id, card_loan_order, age, .keep_all = TRUE) %>% ## Lösche doppelte Zeilen auf 3 Spalten
arrange(account_id) %>%
transmute(number_obs = dplyr::row_number(account_id), account_id, age, card_loan_order)
# Alle DL bezogen von Kartennutzer im Jahr 1998 und allen Nutzern, die keine Karte haben über alle Jahre
comparisson_services %>%
ggplot(aes(card_loan_order)) +
geom_bar(fill = "grey", color = "black", position = "identity") +
scale_x_discrete(labels = c("None", "order", "loan/order", "card", "card/order", "card/loan/order"))+
geom_text(stat = "count", aes(label = ..count.., vjust = -0.5)) +
labs( title = "Number of Counts for each Service Construct",subtitle = "no customer counted twice!")
## Anz. Observationen der DL's über die Account_ID's
comparisson_services %>%
ggplot(aes(x = account_id, fill = card_loan_order)) +
geom_histogram(binwidth = 20, position = "identity") +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(breaks = seq(0,11000,2000)) +
labs(title = "Histogram over Account_ID's regarding to Services") +
facet_wrap(~card_loan_order, ncol = 2) +
caption_label_service_code
## Anz. Observationen der DL's über RowIndex
comparisson_services %>%
ggplot(aes(x = number_obs , fill = card_loan_order)) +
geom_histogram(position = "identity", binwidth = 30) +
facet_wrap(~card_loan_order, ncol = 2) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Number of obs. on RowIndex") +
caption_label_service_code
## Plot: Alle Kunden nach Alter mit deren bezogenen Dienstleistungen
comparisson_services %>%
ggplot(aes(x = age, fill = card_loan_order)) +
geom_density(alpha = 0.5) +
scale_fill_brewer(palette = "Set1") +
theme_gray() +
facet_wrap(~card_loan_order, nrow = 2) +
labs(title = "Verteilungen des Alters auf Dienstleistungen",
subtitle = "Only Card-Owners") +
caption_label_service_code
### Plot: Alle Kunden und ihre DL, die keine Karte haben.
comparisson_services %>%
filter(str_detect(card_loan_order,"^0")) %>%
ggplot(aes(x = age, fill = card_loan_order)) +
geom_density(alpha = 0.5, bw = 3) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Verteilungen des Alters auf Dienstleistungen (Kunden ohne Karte)") +
theme_gray() +
caption_label_service_code
#### Plot: Alle Kunden, die eine Karte haben und deren bezogenen DL
comparisson_services %>%
filter(str_detect(card_loan_order, "^1")) %>%
ggplot(aes(x = age, fill = card_loan_order)) +
geom_density(alpha = 0.5) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Verteilungen des Alters auf Dienstleistungen (Kunden mit Karte)") +
theme_gray() +
caption_label_service_code
source('D:/Data_Science/1. Semester/Challenge Cross-Selling/collaboration/analysis_final/inc/database.R', echo=TRUE)
